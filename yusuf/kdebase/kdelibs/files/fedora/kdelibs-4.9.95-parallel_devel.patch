diff -up kdelibs-4.9.95/cmake/modules/FindKDE4Internal.cmake.parallel_devel kdelibs-4.9.95/cmake/modules/FindKDE4Internal.cmake
--- kdelibs-4.9.95/cmake/modules/FindKDE4Internal.cmake.parallel_devel	2012-12-18 02:26:38.000000000 -0600
+++ kdelibs-4.9.95/cmake/modules/FindKDE4Internal.cmake	2012-12-19 15:21:37.963466601 -0600
@@ -38,10 +38,10 @@
 # The following variables are defined for the various tools required to
 # compile KDE software:
 #
-#  KDE4_KCFGC_EXECUTABLE    - the kconfig_compiler executable
+#  KDE4_KCFGC_EXECUTABLE    - the kconfig_compiler4 executable
 #  KDE4_AUTOMOC_EXECUTABLE  - the kde4automoc executable, deprecated, use AUTOMOC4_EXECUTABLE instead
 #  KDE4_MEINPROC_EXECUTABLE - the meinproc4 executable
-#  KDE4_MAKEKDEWIDGETS_EXECUTABLE - the makekdewidgets executable
+#  KDE4_MAKEKDEWIDGETS_EXECUTABLE - the makekdewidgets4 executable
 #
 # The following variables point to the location of the KDE libraries,
 # but shouldn't be used directly:
@@ -191,7 +191,7 @@
 #    relative path to the file.
 #
 #  KDE4_ADD_WIDGET_FILES (SRCS_VAR file1.widgets ... fileN.widgets)
-#    Use this to add widget description files for the makekdewidgets code generator
+#    Use this to add widget description files for the makekdewidgets4 code generator
 #    for Qt Designer plugins.
 #
 #  KDE4_CREATE_FINAL_FILES (filename_CXX filename_C file1 ... fileN)
@@ -509,31 +509,31 @@ if (_kdeBootStrapping)
       set(LIBRARY_OUTPUT_PATH               ${EXECUTABLE_OUTPUT_PATH} )
       # CMAKE_CFG_INTDIR is the output subdirectory created e.g. by XCode and MSVC
       if (NOT WINCE)
-        set(KDE4_KCFGC_EXECUTABLE             ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/kconfig_compiler )
+        set(KDE4_KCFGC_EXECUTABLE             ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/kconfig_compiler4 )
         set(KDE4_MEINPROC_EXECUTABLE          ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/meinproc4 )
       else (NOT WINCE)
-        set(KDE4_KCFGC_EXECUTABLE             ${HOST_BINDIR}/${CMAKE_CFG_INTDIR}/kconfig_compiler )
+        set(KDE4_KCFGC_EXECUTABLE             ${HOST_BINDIR}/${CMAKE_CFG_INTDIR}/kconfig_compiler4 )
         set(KDE4_MEINPROC_EXECUTABLE          ${HOST_BINDIR}/${CMAKE_CFG_INTDIR}/meinproc4 )
       endif(NOT WINCE)
 
       set(KDE4_MEINPROC_EXECUTABLE          ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/meinproc4 )
       set(KDE4_KAUTH_POLICY_GEN_EXECUTABLE  ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/kauth-policy-gen )
-      set(KDE4_MAKEKDEWIDGETS_EXECUTABLE    ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/makekdewidgets )
+      set(KDE4_MAKEKDEWIDGETS_EXECUTABLE    ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/makekdewidgets4 )
    else (WIN32)
       set(LIBRARY_OUTPUT_PATH               ${CMAKE_BINARY_DIR}/lib )
-      set(KDE4_KCFGC_EXECUTABLE             ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/kconfig_compiler${CMAKE_EXECUTABLE_SUFFIX}.shell )
+      set(KDE4_KCFGC_EXECUTABLE             ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/kconfig_compiler4${CMAKE_EXECUTABLE_SUFFIX}.shell )
       set(KDE4_KAUTH_POLICY_GEN_EXECUTABLE  ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/kauth-policy-gen${CMAKE_EXECUTABLE_SUFFIX}.shell )
       set(KDE4_MEINPROC_EXECUTABLE          ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/meinproc4${CMAKE_EXECUTABLE_SUFFIX}.shell )
-      set(KDE4_MAKEKDEWIDGETS_EXECUTABLE    ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/makekdewidgets${CMAKE_EXECUTABLE_SUFFIX}.shell )
+      set(KDE4_MAKEKDEWIDGETS_EXECUTABLE    ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/makekdewidgets4${CMAKE_EXECUTABLE_SUFFIX}.shell )
    endif (WIN32)
 
    set(KDE4_LIB_DIR ${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR})
 
 
    # when building kdelibs, make the kcfg rules depend on the binaries...
-   set( _KDE4_KCONFIG_COMPILER_DEP kconfig_compiler)
+   set( _KDE4_KCONFIG_COMPILER_DEP kconfig_compiler4)
    set( _KDE4_KAUTH_POLICY_GEN_EXECUTABLE_DEP kauth-policy-gen)
-   set( _KDE4_MAKEKDEWIDGETS_DEP makekdewidgets)
+   set( _KDE4_MAKEKDEWIDGETS_DEP makekdewidgets4)
    set( _KDE4_MEINPROC_EXECUTABLE_DEP meinproc4)
 
    set(KDE4_INSTALLED_VERSION_OK TRUE)
@@ -582,7 +582,8 @@ else (_kdeBootStrapping)
 
    # KDE4_LIB_INSTALL_DIR and KDE4_INCLUDE_INSTALL_DIR are set in KDELibsDependencies.cmake,
    # use them to set the KDE4_LIB_DIR and KDE4_INCLUDE_DIR "public interface" variables
-   set(KDE4_LIB_DIR ${KDE4_LIB_INSTALL_DIR} )
+   set(KDE4_LIB_DIR ${KDE4_LIB_INSTALL_DIR}/kde4/devel )
+   link_directories("${KDE4_LIB_DIR}")
    set(KDE4_INCLUDE_DIR ${KDE4_INCLUDE_INSTALL_DIR} )
 
 
@@ -596,18 +597,18 @@ else (_kdeBootStrapping)
 
    # get the build CONFIGURATIONS which were exported in this file, and use just the first
    # of them to get the location of the installed executables
-   get_target_property(_importedConfigurations  ${KDE4_TARGET_PREFIX}kconfig_compiler IMPORTED_CONFIGURATIONS )
+   get_target_property(_importedConfigurations  ${KDE4_TARGET_PREFIX}kconfig_compiler4 IMPORTED_CONFIGURATIONS )
    list(GET _importedConfigurations 0 _firstConfig)
 
    if(NOT WINCE)
-   get_target_property(KDE4_KCFGC_EXECUTABLE             ${KDE4_TARGET_PREFIX}kconfig_compiler    LOCATION_${_firstConfig})
+   get_target_property(KDE4_KCFGC_EXECUTABLE             ${KDE4_TARGET_PREFIX}kconfig_compiler4   LOCATION_${_firstConfig})
    get_target_property(KDE4_MEINPROC_EXECUTABLE          ${KDE4_TARGET_PREFIX}meinproc4           LOCATION_${_firstConfig})
    else(NOT WINCE)
-    set(KDE4_KCFGC_EXECUTABLE             ${HOST_BINDIR}/${CMAKE_CFG_INTDIR}/kconfig_compiler )
+    set(KDE4_KCFGC_EXECUTABLE             ${HOST_BINDIR}/${CMAKE_CFG_INTDIR}/kconfig_compiler4 )
     set(KDE4_MEINPROC_EXECUTABLE          ${HOST_BINDIR}/${CMAKE_CFG_INTDIR}/meinproc4 )
    endif(NOT WINCE)
    get_target_property(KDE4_KAUTH_POLICY_GEN_EXECUTABLE  ${KDE4_TARGET_PREFIX}kauth-policy-gen    LOCATION_${_firstConfig})
-   get_target_property(KDE4_MAKEKDEWIDGETS_EXECUTABLE    ${KDE4_TARGET_PREFIX}makekdewidgets      LOCATION_${_firstConfig})
+   get_target_property(KDE4_MAKEKDEWIDGETS_EXECUTABLE    ${KDE4_TARGET_PREFIX}makekdewidgets4     LOCATION_${_firstConfig})
 
    # allow searching cmake modules in all given kde install locations (KDEDIRS based)
    execute_process(COMMAND "${KDE4_KDECONFIG_EXECUTABLE}" --path data OUTPUT_VARIABLE _data_DIR ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
@@ -934,7 +935,8 @@ set(CMAKE_SYSTEM_INCLUDE_PATH ${CMAKE_SY
 set(CMAKE_SYSTEM_PROGRAM_PATH ${CMAKE_SYSTEM_PROGRAM_PATH}
                               "${KDE4_BIN_INSTALL_DIR}" )
 
-set(CMAKE_SYSTEM_LIBRARY_PATH ${CMAKE_SYSTEM_LIBRARY_PATH}
+set(CMAKE_SYSTEM_LIBRARY_PATH "${KDE4_LIB_INSTALL_DIR}/kde4/devel"
+                              ${CMAKE_SYSTEM_LIBRARY_PATH}
                               "${KDE4_LIB_INSTALL_DIR}" )
 
 # under Windows dlls may be also installed in bin/
@@ -1363,9 +1365,9 @@ macro (KDE4_PRINT_RESULTS)
    endif (NOT _kdeBootStrapping)
 
    if(KDE4_KCFGC_EXECUTABLE)
-      message(STATUS "Found the KDE4 kconfig_compiler preprocessor: ${KDE4_KCFGC_EXECUTABLE}")
+      message(STATUS "Found the KDE4 kconfig_compiler4 preprocessor: ${KDE4_KCFGC_EXECUTABLE}")
    else(KDE4_KCFGC_EXECUTABLE)
-      message(STATUS "Didn't find the KDE4 kconfig_compiler preprocessor")
+      message(STATUS "Didn't find the KDE4 kconfig_compiler4 preprocessor")
    endif(KDE4_KCFGC_EXECUTABLE)
 
    if(AUTOMOC4_EXECUTABLE)
@@ -1384,7 +1386,7 @@ if (KDE4Internal_FIND_REQUIRED AND NOT K
    endif (NOT KDE4_INSTALLED_VERSION_OK)
 
    if (NOT KDE4_KCFGC_EXECUTABLE)
-     message(FATAL_ERROR "ERROR: could not detect a usable kconfig_compiler")
+     message(FATAL_ERROR "ERROR: could not detect a usable kconfig_compiler4")
    endif (NOT KDE4_KCFGC_EXECUTABLE)
 
    message(FATAL_ERROR "ERROR: could NOT find everything required for compiling KDE 4 programs")
diff -up kdelibs-4.9.95/doc/api/doxygen-preprocess-kcfg.sh.parallel_devel kdelibs-4.9.95/doc/api/doxygen-preprocess-kcfg.sh
--- kdelibs-4.9.95/doc/api/doxygen-preprocess-kcfg.sh.parallel_devel	2012-12-17 08:14:16.000000000 -0600
+++ kdelibs-4.9.95/doc/api/doxygen-preprocess-kcfg.sh	2012-12-19 15:21:37.963466601 -0600
@@ -2,9 +2,9 @@
 # Generates and cleans KConfigXT source code during a API dox build
 #
 
-kcfg_compiler="`kde4-config --prefix`/bin/kconfig_compiler"
+kcfg_compiler="`kde4-config --prefix`/bin/kconfig_compiler4"
 if test -z "$kcfg_compiler"; then
-	echo "kconfig_compiler not found!"
+	echo "kconfig_compiler4 not found!"
 	exit 1;
 fi
 
diff -up kdelibs-4.9.95/kdecore/kconfig_compiler/checkkcfg.pl.parallel_devel kdelibs-4.9.95/kdecore/kconfig_compiler/checkkcfg.pl
--- kdelibs-4.9.95/kdecore/kconfig_compiler/checkkcfg.pl.parallel_devel	2012-12-17 08:14:16.000000000 -0600
+++ kdelibs-4.9.95/kdecore/kconfig_compiler/checkkcfg.pl	2012-12-19 15:21:37.963466601 -0600
@@ -15,12 +15,12 @@ $file_cpp = "$filebase.cpp";
 
 $kcfgc = $file . "c";
 
-$cmd = "./kconfig_compiler $file $kcfgc";
+$cmd = "./kconfig_compiler4 $file $kcfgc";
 
 #print "CMD $cmd\n";
 
 if ( system( $cmd ) != 0 ) {
-  print STDERR "Unable to run kconfig_compiler\n";
+  print STDERR "Unable to run kconfig_compiler4\n";
   exit 1;
 }
 
diff -up kdelibs-4.9.95/kdecore/kconfig_compiler/CMakeLists.txt.parallel_devel kdelibs-4.9.95/kdecore/kconfig_compiler/CMakeLists.txt
--- kdelibs-4.9.95/kdecore/kconfig_compiler/CMakeLists.txt.parallel_devel	2012-12-17 08:14:16.000000000 -0600
+++ kdelibs-4.9.95/kdecore/kconfig_compiler/CMakeLists.txt	2012-12-19 15:21:37.964466589 -0600
@@ -11,13 +11,13 @@
    set(kconfig_compiler_SRCS kconfig_compiler.cpp)
 
 
-   kde4_add_executable(kconfig_compiler NOGUI ${kconfig_compiler_SRCS})
+   kde4_add_executable(kconfig_compiler4 NOGUI ${kconfig_compiler_SRCS})
 
-   target_link_libraries(kconfig_compiler  ${QT_QTCORE_LIBRARY} ${QT_QTXML_LIBRARY} )
+   target_link_libraries(kconfig_compiler4  ${QT_QTCORE_LIBRARY} ${QT_QTXML_LIBRARY} )
 
    # "export" this target too so we can use the LOCATION property of the imported target in
    # FindKDE4Internal.cmake to get the full path to the installed executable instead of using FIND_PROGRAM(), Alex
-   install(TARGETS kconfig_compiler EXPORT kdelibsToolsTargets ${INSTALL_TARGETS_DEFAULT_ARGS} )
+   install(TARGETS kconfig_compiler4 EXPORT kdelibsToolsTargets ${INSTALL_TARGETS_DEFAULT_ARGS} )
 
 
 #    # export this binary for cross-compilation
diff -up kdelibs-4.9.95/kdeui/tests/kconfig_compiler/CMakeLists.txt.parallel_devel kdelibs-4.9.95/kdeui/tests/kconfig_compiler/CMakeLists.txt
--- kdelibs-4.9.95/kdeui/tests/kconfig_compiler/CMakeLists.txt.parallel_devel	2012-12-17 08:14:16.000000000 -0600
+++ kdelibs-4.9.95/kdeui/tests/kconfig_compiler/CMakeLists.txt	2012-12-19 15:21:37.964466589 -0600
@@ -9,7 +9,7 @@ macro(GEN_KCFG_TEST_SOURCE _testName _sr
    add_custom_command(
       OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${_testName}.cpp ${CMAKE_CURRENT_BINARY_DIR}/${_testName}.h
       COMMAND ${KDE4_KCFGC_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/${_testName}.kcfg ${CMAKE_CURRENT_SOURCE_DIR}/${_testName}.kcfgc
-      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${_testName}.kcfg ${CMAKE_CURRENT_SOURCE_DIR}/${_testName}.kcfgc kconfig_compiler)
+      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${_testName}.kcfg ${CMAKE_CURRENT_SOURCE_DIR}/${_testName}.kcfgc kconfig_compiler4)
 
 #   set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/${_testName}.h PROPERTIES GENERATED TRUE)
    qt4_generate_moc(${CMAKE_CURRENT_BINARY_DIR}/${_testName}.h ${CMAKE_CURRENT_BINARY_DIR}/${_testName}.moc )
diff -up kdelibs-4.9.95/kdewidgets/CMakeLists.txt.parallel_devel kdelibs-4.9.95/kdewidgets/CMakeLists.txt
--- kdelibs-4.9.95/kdewidgets/CMakeLists.txt.parallel_devel	2012-12-17 08:14:16.000000000 -0600
+++ kdelibs-4.9.95/kdewidgets/CMakeLists.txt	2012-12-19 15:21:37.964466589 -0600
@@ -14,24 +14,24 @@ include_directories(
 set(makekdewidgets_SRCS makekdewidgets.cpp )
 
 
-kde4_add_executable(makekdewidgets NOGUI ${makekdewidgets_SRCS})
+kde4_add_executable(makekdewidgets4 NOGUI ${makekdewidgets_SRCS})
 
-target_link_libraries(makekdewidgets  ${KDE4_KDECORE_LIBS} )
+target_link_libraries(makekdewidgets4  ${KDE4_KDECORE_LIBS} )
 
 # "export" this target too so we can use the LOCATION property of the imported target in
 # FindKDE4Internal.cmake to get the full path to the installed executable instead of using FIND_PROGRAM(), Alex
-install(TARGETS makekdewidgets  EXPORT kdelibsToolsTargets ${INSTALL_TARGETS_DEFAULT_ARGS} )
+install(TARGETS makekdewidgets4  EXPORT kdelibsToolsTargets ${INSTALL_TARGETS_DEFAULT_ARGS} )
 
 
 ########### next target ###############
 
 if(QT_QTDESIGNER_FOUND)
   # get the name of the generated wrapper script (which sets up LD_LIBRARY_PATH)
-  get_target_property(MAKEKDEWIDGETS_EXECUTABLE makekdewidgets WRAPPER_SCRIPT)
+  get_target_property(MAKEKDEWIDGETS_EXECUTABLE makekdewidgets4 WRAPPER_SCRIPT)
 
   add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/kdewidgets.cpp
     COMMAND "${MAKEKDEWIDGETS_EXECUTABLE}" -o ${CMAKE_CURRENT_BINARY_DIR}/kdewidgets.cpp ${CMAKE_CURRENT_SOURCE_DIR}/kde.widgets
-    MAIN_DEPENDENCY kde.widgets DEPENDS makekdewidgets)
+    MAIN_DEPENDENCY kde.widgets DEPENDS makekdewidgets4)
 
   set(kdewidgets_PART_SRCS
      classpreviews.cpp
@@ -61,7 +61,7 @@ if(QT_QTDESIGNER_FOUND)
   if(NOT KDE_NO_DEPRECATED)
     add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/kdedeprecated.cpp
       COMMAND "${MAKEKDEWIDGETS_EXECUTABLE}" -o ${CMAKE_CURRENT_BINARY_DIR}/kdedeprecated.cpp ${CMAKE_CURRENT_SOURCE_DIR}/kdedeprecated.widgets
-      MAIN_DEPENDENCY kdedeprecated.widgets DEPENDS makekdewidgets)
+      MAIN_DEPENDENCY kdedeprecated.widgets DEPENDS makekdewidgets4)
 
     set(kdedeprecated_PART_SRCS
        classpreviews.cpp
@@ -96,7 +96,7 @@ if(QT_QTDESIGNER_FOUND)
 
   add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/kdewebkitwidgets.cpp
     COMMAND "${MAKEKDEWIDGETS_EXECUTABLE}" -o ${CMAKE_CURRENT_BINARY_DIR}/kdewebkitwidgets.cpp ${CMAKE_CURRENT_SOURCE_DIR}/kdewebkit.widgets
-    MAIN_DEPENDENCY kdewebkit.widgets DEPENDS makekdewidgets)
+    MAIN_DEPENDENCY kdewebkit.widgets DEPENDS makekdewidgets4)
 
   set(kdewebkitwidgets_PART_SRCS
      classpreviews.cpp
@@ -132,7 +132,7 @@ if(QT_QTDESIGNER_FOUND)
 
      add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/kde3supportwidgets.cpp
        COMMAND "${MAKEKDEWIDGETS_EXECUTABLE}" -o ${CMAKE_CURRENT_BINARY_DIR}/kde3supportwidgets.cpp ${CMAKE_CURRENT_SOURCE_DIR}/kde3support.widgets
-       MAIN_DEPENDENCY kde3support.widgets DEPENDS makekdewidgets)
+       MAIN_DEPENDENCY kde3support.widgets DEPENDS makekdewidgets4)
 
      set(kde3supportwidgets_PART_SRCS
         classpreviews.cpp
